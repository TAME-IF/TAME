/*******************************************************************************
 * Copyright (c) 2016 Matt Tropiano
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
 ******************************************************************************/
package net.mtrop.tame;

import net.mtrop.tame.interrupt.RunawayRequestInterrupt;
import net.mtrop.tame.struct.Cue;

import com.blackrook.commons.linkedlist.Queue;

/**
 * Response object generated by the engine in which error
 * or output messages get sent back (and perhaps re-interpreted by the client
 * or other objects to facilitate user feedback).
 * @author Matthew Tropiano
 */
public class TAMEResponse implements TAMEConstants
{
	/** The output message. */
	private Queue<Cue> responseCues;
	/** Command counter. */
	private int commandsExecuted;
	/** Time in nanos to process a full request. */
	private long requestNanos;
	/** Time in nanos to interpret input. */
	private long interpretNanos;
	
	/**
	 * Creates a new request object.
	 */
	TAMEResponse()
	{
		responseCues = new Queue<Cue>();
		commandsExecuted = 0;
	}

	/**
	 * Returns the cues on this response. 
	 */
	public Queue<Cue> getCues()
	{
		return responseCues;
	}

	/**
	 * Adds a response cue to this response object. It can range from
	 * sound cues to changes in scenery, or additional instructions from
	 * the virtual machine to a client. The client is required to obey certain
	 * cues, and can safely ignore the rest.
	 */
	public void addCue(String type, long content)
	{
		responseCues.enqueue(Cue.create(type, content));
	}

	/**
	 * Adds a response cue to this response object. It can range from
	 * sound cues to changes in scenery, or additional instructions from
	 * the virtual machine to a client. The client is required to obey certain
	 * cues, and can safely ignore the rest.
	 */
	public void addCue(String type, double content)
	{
		responseCues.enqueue(Cue.create(type, content));
	}

	/**
	 * Adds a response cue to this response object. It can range from
	 * sound cues to changes in scenery, or additional instructions from
	 * the virtual machine to a client. The client is required to obey certain
	 * cues, and can safely ignore the rest.
	 */
	public void addCue(String type, boolean content)
	{
		responseCues.enqueue(Cue.create(type, content));
	}

	/**
	 * Adds a response cue to this response object. It can range from
	 * sound cues to changes in scenery, or additional instructions from
	 * the virtual machine to a client. The client is required to obey certain
	 * cues, and can safely ignore the rest.
	 */
	public void addCue(String type, String content)
	{
		responseCues.enqueue(Cue.create(type, content));
	}

	/**
	 * Adds a response cue to this response object. It can range from
	 * sound cues to changes in scenery, or additional instructions from
	 * the virtual machine to a client. The client is required to obey certain
	 * cues, and can safely ignore the rest.
	 */
	public void addCue(String type)
	{
		responseCues.enqueue(Cue.create(type));
	}

	/**
	 * Increments the commands executed counter by 1.
	 * Also checks against the runaway threshold.
	 * After this object is received by the client, this means nothing.
	 */
	public void incrementAndCheckCommandsExecuted() throws RunawayRequestInterrupt
	{
		commandsExecuted++;
		if (commandsExecuted >= RUNAWAY_THRESHOLD)
			throw new RunawayRequestInterrupt("Runaway request detected! Breached threshold of "+RUNAWAY_THRESHOLD+" requests.");
	}
	
	/**
	 * Returns the amount of commands executed because of the input.
	 */
	public int getCommandsExecuted()
	{
		return commandsExecuted;
	}
	
	/**
	 * Adds a trace cue, but only if trace is set.
	 */
	public void trace(TAMERequest request, String format, Object ... args)
	{
		if (request.isTracing()) 
			addCue(CUE_TRACE, String.format(format, args));
	}

	/**
	 * Sets the request nanos for the full processing.
	 * @param requestNanos the time in nanoseconds for processing the request.
	 */
	void setRequestNanos(long requestNanos) 
	{
		this.requestNanos = requestNanos;
	}
	
	/**
	 * Sets the amount of nanos it took to process the input itself.
	 * @param interpretNanos the time in nanoseconds to interpret client input.
	 */
	void setInterpretNanos(long interpretNanos) 
	{
		this.interpretNanos = interpretNanos;
	}
	
	/**
	 * Gets the request nanos for the full processing.
	 * @return the time in nanoseconds for processing the request.
	 */
	public long getRequestNanos() 
	{
		return requestNanos;
	}
	
	/**
	 * Gets the amount of nanos it took to process the input itself.
	 * @return the time in nanoseconds to interpret client input.
	 */
	public long getInterpretNanos() 
	{
		return interpretNanos;
	}
	
}
