<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<!-- ====================================================================== 
     Text Adventure Module Engine   
     Matt Tropiano                                                                
     ====================================================================== -->
<project name="tame" default="compile">

	<description>TAME</description>

	<property file="build.properties" />
	<property file="versions.properties" />
	
	<!-- Dependencies -->
	<property name="dev.base" value=".." />
	<property name="S" value="${path.separator}" />

	<!-- Project Libs -->
	<property name="common.lib" value="${dev.base}/Common/bin" />
	<property name="common.io.lib" value="${dev.base}/CommonIO/bin" />
	<property name="common.lang.lib" value="${dev.base}/CommonLang/bin" />
	<property name="launch4j.dir" value="${lib.base}/launch4j" />
	<property name="launch4j.lib.jar" value="${launch4j.dir}/launch4j.jar" />
	<property name="launch4j.xstream.lib.jar" value="${launch4j.dir}/lib/xstream.jar" />	
	
	<!-- Project Info -->
	<property name="project.archive" value="tame" />
	<property name="project.javadoc.title" value="TAME" />
	<property name="project.classpath" value="${common.lib}${S}${common.io.lib}${S}${common.lang.lib}" />
	<property name="project.javadoc.packages" value="
		com.tameif.tame,
		com.tameif.tame.compiler,
		com.tameif.tame.console,
		com.tameif.tame.element,
		com.tameif.tame.element.context,
		com.tameif.tame.exception,
		com.tameif.tame.factory,
		com.tameif.tame.interrupt,
		com.tameif.tame.lang
	"/>
	
	<import file="build-import.xml" />
	<import file="build-dependencies.xml" />

	<!-- Folders and File Names -->
	<property name="src.test.dir" value="testsrc" />
	<property name="package.base.dir" value="net/mtrop/tame" />
	<property name="resource.dir" value="resources" />
	<property name="replace.dir" value="${build.dir}/replace" />
	<property name="zip.win32.filename" value="${project.archive}-win32-${build.version}.zip" />
	<property name="tamedocs.dir" value="${build.dir}/tamedocs" />

	<!-- Versions -->
	<property name="win32.version" value="0.0.0.0" />
	
	<property name="jar.tame.filename" value="${project.archive}-${build.version}.jar" />
	<property name="jar.compiler.one.filename" value="${project.archive}-compiler-${build.version}.jar" />
	<property name="jar.console.client.one.filename" value="${project.archive}-client-${build.version}.jar" />	
	<property name="jar.compiler.one.min.filename" value="${project.archive}-compiler-${build.version}-min.jar" />
	<property name="jar.console.client.one.min.filename" value="${project.archive}-client-${build.version}-min.jar" />	

	<property name="win32.dir" value="${build.dir}/win32" />
	<property name="win32.compiler.filename" value="tamec.exe" />
	<property name="win32.console.client.filename" value="tame.exe" />
	
	<!-- Filesets -->
	
	<zipfileset 
		id="fileset.compiler.min" 
		src="${jar.dir}/${jar.compiler.one.filename}" 
		includesfile="build-tamec-exe-include.def" 
	/>

	<zipfileset 
		id="fileset.client.min" 
		src="${jar.dir}/${jar.console.client.one.filename}" 
		includesfile="build-tame-exe-include.def" 
	/>
	
	<target name="clean.win32" description="Cleans up the exe builds.">
		<delete dir="${win32.dir}" includeemptydirs="true" casesensitive="false" /> 
	</target>

	<target name="init.win32" depends="clean.win32" description="Initializes the EXE folders.">
		<mkdir dir="${win32.dir}" />
	</target>

	<target name="clean" depends="clean.jar, clean.docs, clean.zip, clean.compile, clean.win32"  description="Cleans up everything.">
	</target>

	<target name="compile.scripts.windows" if="${os.isWindows}">
		<!-- Windows Commands -->
		<echo message="@java -cp ${project.classpath}${S}${bin.dir} com.tameif.tame.console.TAMEConsoleClientMain %*&#10;" file="tame.cmd" />
		<echo message="@java -cp ${project.classpath}${S}${bin.dir} com.tameif.tame.compiler.TAMECompilerMain %*&#10;" file="tamec.cmd" />
	</target>
	
	<target name="compile.scripts.bash" if="${os.bash}">
		<!-- Bash Shell Commands -->
		<echo message="#!/bin/bash&#10;" file="tame.sh" />
		<echo message="java -cp ${project.classpath}${S}${bin.dir} com.tameif.tame.console.TAMEConsoleClientMain $@&#10;" file="tame.sh" append="true" />
		<echo message="#!/bin/bash&#10;" file="tamec.sh" />
		<echo message="java -cp ${project.classpath}${S}${bin.dir} com.tameif.tame.compiler.TAMECompilerMain $@&#10;" file="tamec.sh" append="true" />
		<!-- Set permissions -->
		<chmod file="tame.sh" perm="ugo+rx"/>
		<chmod file="tamec.sh" perm="ugo+rx"/>
	</target>

	<target name="compile" depends="init.compile, get.os, compile.scripts.windows, compile.scripts.bash" description="Compiles the project, including test classes.">
		<javac 
			source="1.8"
			srcdir="${src.dir}${S}${src.test.dir}" 
			destdir="${bin.dir}"
            includeAntRuntime="false"
			classpath="${project.classpath}"
			debug="off" 
			/>
		<copy todir="${bin.dir}">
			<fileset dir="${resource.dir}" />
		</copy>
	</target>

	<target name="dependency.common">
		<git-export repository="https://github.com/BlackRookSoftware/Common" dest="${dependencies.dir}/Common" />
		<ant antfile="${dependencies.dir}/Common/build.xml" useNativeBasedir="true" inheritAll="false" target="compile" />
	</target>
	<target name="dependency.commonio">
		<git-export repository="https://github.com/BlackRookSoftware/CommonIO" dest="${dependencies.dir}/CommonIO" />
		<ant antfile="${dependencies.dir}/CommonIO/build.xml" useNativeBasedir="true" inheritAll="false" target="compile" />
	</target>
	<target name="dependency.commonlang">
		<git-export repository="https://github.com/BlackRookSoftware/CommonLang" dest="${dependencies.dir}/CommonLang" />
		<ant antfile="${dependencies.dir}/CommonLang/build.xml" useNativeBasedir="true" inheritAll="false" target="compile" />
	</target>
	<target name="dependency.launch4j.clone">
		<git-export repository="https://github.com/mirror/launch4j" dest="${dependencies.dir}/launch4j" />
	</target>
	<target name="dependency.launch4j.win32" if="${os.isWindows}">
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="binutils-win32" />
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="jar" />
	</target>
	<target name="dependency.launch4j.linux32" if="${os.isLinux32}">
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="binutils-linux" />
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="jar" />
	</target>
	<target name="dependency.launch4j.linux64" if="${os.isLinux64}">
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="binutils-linux-x64" />
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="jar" />
	</target>
	<target name="dependency.launch4j.osx32" if="${os.isOSX}">
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="binutils-macosx-x86" />
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="jar" />
	</target>
	<target name="dependency.launch4j" depends="dependency.launch4j.clone, get.os, dependency.launch4j.win32, dependency.launch4j.linux32, dependency.launch4j.linux64, dependency.launch4j.osx32">
	</target>
	<target name="dependency.properties">
		<echo message="Writing to build.properties...." />
		<echo message="dev.base=${dependencies.dir}&#10;" file="build.properties" append="true" />
		<echo message="libs.base=${dependencies.dir}&#10;" file="build.properties" append="true" />
		<echo message="launch4j.dir=${dependencies.dir}/launch4j&#10;" file="build.properties" append="true" />
	</target>
	
	<target name="dependencies" depends="init.dependencies, dependency.common, dependency.commonio, dependency.commonlang, dependency.launch4j, dependency.properties" description="Downloads and compiles the dependencies.">
	</target>

	<target name="javadoc" depends="init.docs" description="Builds the documentation.">
        <javadoc access="protected" 
        	additionalparam="-J-Xmx512m  " author="true" 
        	classpath="${project.classpath}${path.separator}${bin.dir}" 
        	doctitle="${project.javadoc.title}" 
        	sourcepath="${src.dir}" 
        	packagenames="${project.javadoc.packages}"
        	destdir="${docs.dir}" 
    		source="1.8" 
        	splitindex="true" 
        	use="true" 
        	version="true" 
        	nodeprecated="false" 
        	nodeprecatedlist="false" 
        	noindex="false" 
        	nonavbar="false" 
        	notree="false"
    		>
            <link href="https://blackrooksoftware.com/docs/common/"/>
            <link href="https://blackrooksoftware.com/docs/commonio/"/>
            <link href="https://blackrooksoftware.com/docs/commonlang/"/>
            <link href="https://docs.oracle.com/javase/9/docs/api/"/>
        </javadoc>
    </target>	

	<!-- Generates the version resource. -->
	<target name="write.version">
		<delete file="${bin.dir}/TAMEVersion.txt" />
		<echo message="${build.version}" file="${bin.dir}/${package.base.dir}/TAMEVersion.txt" />
	</target>

	<target name="jar.tame" depends="compile, write.version" description="Jars up TAME classes. Nothing executable.">
		<delete file="${jar.dir}/${jar.tame.filename}" casesensitive="false" /> 
		<jar destfile="${jar.dir}/${jar.tame.filename}">
			<fileset dir="${bin.dir}" >
			    <exclude name="**/console/" />
			    <exclude name="**/compiler/" />
			    <exclude name="**/test/" />
			</fileset>
			<fileset dir="${resource.dir}">
			</fileset>
		</jar>
	</target>
	
	<target name="jar.tame.compiler.one" depends="compile, write.version" description="Jars up all classes needed to run the compiler in one standalone JAR.">
		<delete file="${jar.dir}/${jar.compiler.one.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.compiler.one.filename}">
			<manifest>
		    	<attribute name="Main-Class" value="com.tameif.tame.compiler.TAMECompilerMain"/>
            </manifest>
			<fileset dir="${bin.dir}" >
			    <exclude name="**/console/" />
			    <exclude name="**/test/" />
			</fileset>
		</jar>
		<jar destfile="${jar.dir}/${jar.compiler.one.filename}" update="true">
			<fileset dir="${common.lib}" >
			</fileset>
			<fileset dir="${common.io.lib}" >
			</fileset>
			<fileset dir="${common.lang.lib}" >
			</fileset>
			<fileset dir="${resource.dir}">
			</fileset>
		</jar>
	</target>

	<target name="jar.tame.console.client.one" depends="compile, write.version" description="Jars up all classes needed to run the console client in one standalone JAR.">
		<delete file="${jar.dir}/${jar.console.client.one.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.console.client.one.filename}">
			<manifest>
		    	<attribute name="Main-Class" value="com.tameif.tame.console.TAMEConsoleClientMain"/>
            </manifest>
			<fileset dir="${bin.dir}" >
			    <exclude name="**/compiler/" />
			    <exclude name="**/test/" />
			</fileset>
		</jar>
		<jar destfile="${jar.dir}/${jar.console.client.one.filename}" update="true">
			<fileset dir="${common.lib}" >
			</fileset>
			<fileset dir="${common.io.lib}" >
			</fileset>
			<fileset dir="${common.lang.lib}" >
			</fileset>
		</jar>
	</target>

	<target name="jar.tame.compiler.one.min" depends="jar.tame.compiler.one" description="Jars up the minified set of classes needed to run the compiler in one standalone JAR.">
		<delete file="${jar.dir}/${jar.compiler.one.min.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.compiler.one.min.filename}">
			<manifest>
		    	<attribute name="Main-Class" value="com.tameif.tame.compiler.TAMECompilerMain"/>
            </manifest>
			<zipfileset refid="fileset.compiler.min" />
		</jar>
	</target>
	
	<target name="jar.tame.console.client.one.min" depends="jar.tame.console.client.one" description="Jars up the minified set of classes needed to run the console client in one standalone JAR.">
		<delete file="${jar.dir}/${jar.console.client.one.min.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.console.client.one.min.filename}">
			<manifest>
		    	<attribute name="Main-Class" value="com.tameif.tame.console.TAMEConsoleClientMain"/>
            </manifest>
			<zipfileset refid="fileset.client.min" />
		</jar>
	</target>

	<target name="jar" depends="init.jar, jar.tame, jar.tame.compiler.one, jar.tame.compiler.one.min, jar.tame.console.client.one, jar.tame.console.client.one.min" description="Make all JARs.">
	</target>

	<target name="win32.taskdef">
		<taskdef 
			name="launch4j"
			classname="net.sf.launch4j.ant.Launch4jTask"
			classpath="${launch4j.lib.jar}${S}${launch4j.xstream.lib.jar}"
		/>
	</target>
	
	<target name="win32.compiler" depends="jar.tame.compiler.one.min, clean.win32, init.win32, win32.taskdef">
		<delete file="${win32.dir}/${win32.compiler.filename}" />
		<launch4j 
			configFile="./launch4j/TAMECompiler.xml" 
			jar="${jar.dir}/${jar.compiler.one.min.filename}"
			outfile="${win32.dir}/${win32.compiler.filename}"
			fileVersion="${win32.version}" 
			txtFileVersion="${win32.version}" 
			productVersion="${win32.version}" 
			txtProductVersion="${win32.version}"
		/>
	</target>
	
	<target name="win32.console.client" depends="jar.tame.console.client.one.min, clean.win32, init.win32, win32.taskdef">
		<delete file="${win32.dir}/${win32.console.client.filename}" />
		<launch4j 
			configFile="./launch4j/TAMEConsoleClient.xml" 
			jar="${jar.dir}/${jar.console.client.one.min.filename}"
			outfile="${win32.dir}/${win32.console.client.filename}"
			fileVersion="${win32.version}" 
			txtFileVersion="${win32.version}" 
			productVersion="${win32.version}" 
			txtProductVersion="${win32.version}"
		/>
	</target>

	<target name="win32" depends="win32.compiler, win32.console.client" description="Make all EXEs.">
		<condition property="win32.deploy.dir.set" else="false">
			<isset property="win32.deploy.dir"/>
		</condition>
	</target>

	<target name="win32.deploy.true" if="${win32.deploy.dir.set}">
		<copy overwrite="true" todir="${win32.deploy.dir}">
			<fileset dir="${win32.dir}"/>
		</copy>
	</target>
	<target name="win32.deploy.false" unless="${win32.deploy.dir.set}">
		<echo message="Skipping deploy: win32.deploy.dir property not set!" />
	</target>

	<target name="win32.deploy" depends="win32, win32.deploy.true, win32.deploy.false" description="Makes and deploys EXEs if output directory specified.">
	</target>
	
	<target name="zip.win32" depends="win32" description="Makes and zips the EXEs.">
		<delete file="${zip.dir}/${zip.win32.filename}" />
		<zip basedir="${win32.dir}" destfile="${zip.dir}/${zip.win32.filename}"></zip>
		<zip destfile="${zip.dir}/${zip.win32.filename}" update="true">
			<fileset refid="fileset.documents" />
		</zip>
	</target>

	<target name="zip.jar" depends="init.zip, jar" description="Makes and zips the JARs.">
		<delete file="${zip.dir}/${zip.filename}" />
		<zip destfile="${zip.dir}/${zip.filename}">
			<fileset dir="${jar.dir}" />
			<fileset refid="fileset.documents" />
		</zip>
	</target>

	<target name="zip" depends="zip.jar, zip.docs, zip.win32" description="Creates all zips.">
	</target>
	
	<target name="release" depends="zip, win32.deploy">
	</target>

</project>