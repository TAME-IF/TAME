<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2015-2016 Matt Tropiano
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the GNU Lesser Public License v2.1
    which accompanies this distribution, and is available at
    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
   
    Contributors:
        Matt Tropiano - initial API and implementation
 -->
<!DOCTYPE project>
<!-- ====================================================================== 
     Text Adventure Module Engine   
     Matt Tropiano                                                                
     ====================================================================== -->
<project name="build" default="compile">

	<description>TAME</description>

	<property file="build.properties" />
	<property file="versions.properties" />
	
	<!-- Dependencies -->
	<property name="dev.base" value=".." />
	<property name="S" value="${path.separator}" />

	<!-- Project Libs -->
	<property name="common.lib" value="${dev.base}/Common/bin" />
	<property name="common.io.lib" value="${dev.base}/CommonIO/bin" />
	<property name="common.lang.lib" value="${dev.base}/CommonLang/bin" />
	<property name="launch4j.dir" value="${lib.base}/launch4j" />
	<property name="launch4j.lib.jar" value="${launch4j.dir}/launch4j.jar" />
	<property name="launch4j.xstream.lib.jar" value="${launch4j.dir}/lib/xstream.jar" />	
	
	<!-- Project Info -->
	<property name="project.archive" value="tame" />
	<property name="project.javadoc.title" value="TAME" />
	<property name="project.classpath" value="${common.lib}${S}${common.io.lib}${S}${common.lang.lib}" />
	<property name="project.javadoc.packages" value="
		net.mtrop.tame,
		net.mtrop.tame.compiler,
		net.mtrop.tame.console,
		net.mtrop.tame.element,
		net.mtrop.tame.element.type,
		net.mtrop.tame.element.type.context,
		net.mtrop.tame.exception,
		net.mtrop.tame.factory,
		net.mtrop.tame.interrupt,
		net.mtrop.tame.lang,
		net.mtrop.tame.struct
	"/>
	
	<import file="build-import.xml" />

	<!-- Folders and File Names -->
	<property name="resource.dir" value="resources" />
	<property name="replace.dir" value="${build.dir}/replace" />
	<property name="zip.exe.filename" value="${project.archive}-exe-${build.version}.zip" />

	<!-- Replace Tokens -->
	<property name="replace.version.key" value="$REPLACE_KEY_BUILD_VERSION$" />

	<!-- Versions -->
	<property name="exe.version" value="0.0.0.0" />
	
	<property name="jar.tame.filename" value="${project.archive}-${build.version}" />
	<property name="jar.compiler.one.filename" value="${project.archive}-compiler-${build.version}.jar" />
	<property name="jar.console.client.one.filename" value="${project.archive}-client-${build.version}.jar" />	
	<property name="jar.compiler.one.min.filename" value="${project.archive}-compiler-${build.version}-min.jar" />
	<property name="jar.console.client.one.min.filename" value="${project.archive}-client-${build.version}-min.jar" />	

	<property name="exe.dir" value="${build.dir}/win32" />
	<property name="exe.compiler.filename" value="tamec.exe" />
	<property name="exe.console.client.filename" value="tame.exe" />
	
	<!-- Filesets -->
	
	<zipfileset 
		id="fileset.compiler.min" 
		src="${jar.dir}/${jar.compiler.one.filename}" 
		includesfile="build-tamec-exe-include.def" 
	/>

	<zipfileset 
		id="fileset.client.min" 
		src="${jar.dir}/${jar.console.client.one.filename}" 
		includesfile="build-tame-exe-include.def" 
	/>
	
	<!-- Taskdefs -->

	<taskdef 
		name="launch4j"
		classname="net.sf.launch4j.ant.Launch4jTask"
		classpath="${launch4j.lib.jar}${S}${launch4j.xstream.lib.jar}"
	/>
	
	<target name="clean.replace" description="Cleans up the replace builds.">
		<delete dir="${replace.dir}" includeemptydirs="true" casesensitive="false" /> 
	</target>

	<target name="init.replace" depends="clean.replace" description="Initializes the replace folders.">
		<mkdir dir="${replace.dir}" />
	</target>

	<target name="clean.exe" description="Cleans up the exe builds.">
		<delete dir="${exe.dir}" includeemptydirs="true" casesensitive="false" /> 
	</target>

	<target name="init.exe" depends="clean.exe" description="Initializes the EXE folders.">
		<mkdir dir="${exe.dir}" />
	</target>

	<target name="clean" depends="clean.jar, clean.docs, clean.zip, clean.compile, clean.exe"  description="Cleans up everything.">
	</target>
	
	<target name="javadoc" depends="init.docs" description="Builds the documentation.">
        <javadoc access="protected" 
        	additionalparam="-J-Xmx512m  " author="true" 
        	classpath="${project.classpath}${path.separator}${bin.dir}" 
        	doctitle="${project.javadoc.title}" 
        	sourcepath="${src.dir}" 
        	packagenames="${project.javadoc.packages}"
        	destdir="${docs.dir}" 
    		source="1.8" 
        	splitindex="true" 
        	use="true" 
        	version="true" 
        	nodeprecated="false" 
        	nodeprecatedlist="false" 
        	noindex="false" 
        	nonavbar="false" 
        	notree="false"
    		>
            <link href="http://blackrooksoftware.com/docs/common/"/>
            <link href="http://blackrooksoftware.com/docs/commonio/"/>
            <link href="http://blackrooksoftware.com/docs/commonlang/"/>
            <link href="http://download.oracle.com/javase/7/docs/api/"/>
        </javadoc>
    </target>	

	<target name="replace.version" depends="init.replace" description="Generates the version resource."> 
		<delete file="${replace.dir}/TAMEVersion.txt" />
		<copy overwrite="true" todir="${replace.dir}">
			<file name="${resource.dir}/TAMEVersion.txt" />
		</copy>
		<replace file="${replace.dir}/TAMEVersion.txt" value="${build.version.number}" token="${replace.version.key}" />
	</target>

	<target name="jar.tame" depends="compile, replace.version" description="Jars up TAME classes. Nothing executable.">
		<delete file="${jar.dir}/${jar.tame.filename}" casesensitive="false" /> 
		<jar destfile="${jar.dir}/${jar.tame.filename}">
			<fileset dir="${bin.dir}" >
			    <exclude name="**/console/" />
			    <exclude name="**/compiler/" />
			    <exclude name="**/test/" />
			</fileset>
		</jar>
		<jar destfile="${jar.dir}/${jar.tame.filename}" update="true">
			<zipfileset dir="${replace.dir}" prefix="net/mtrop/tame">
			</zipfileset>
		</jar>
	</target>
	
	<target name="jar.tame.compiler.one" depends="compile, replace.version" description="Jars up all classes needed to run the compiler in one standalone JAR.">
		<delete file="${jar.dir}/${jar.compiler.one.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.compiler.one.filename}">
			<manifest>
		    	<attribute name="Main-Class" value="net.mtrop.tame.compiler.TAMECompilerMain"/>
            </manifest>
			<fileset dir="${bin.dir}" >
			    <exclude name="**/console/" />
			    <exclude name="**/test/" />
			</fileset>
		</jar>
		<jar destfile="${jar.dir}/${jar.compiler.one.filename}" update="true">
			<fileset dir="${common.lib}" >
			</fileset>
			<fileset dir="${common.io.lib}" >
			</fileset>
			<fileset dir="${common.lang.lib}" >
			</fileset>
			<zipfileset dir="${replace.dir}" prefix="net/mtrop/tame">
			</zipfileset>
		</jar>
	</target>

	<target name="jar.tame.console.client.one" depends="compile, replace.version" description="Jars up all classes needed to run the console client in one standalone JAR.">
		<delete file="${jar.dir}/${jar.console.client.one.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.console.client.one.filename}">
			<manifest>
		    	<attribute name="Main-Class" value="net.mtrop.tame.console.TAMEConsoleClientMain"/>
            </manifest>
			<fileset dir="${bin.dir}" >
			    <exclude name="**/compiler/" />
			    <exclude name="**/test/" />
			</fileset>
		</jar>
		<jar destfile="${jar.dir}/${jar.console.client.one.filename}" update="true">
			<fileset dir="${common.lib}" >
			</fileset>
			<fileset dir="${common.io.lib}" >
			</fileset>
			<fileset dir="${common.lang.lib}" >
			</fileset>
			<zipfileset dir="${replace.dir}" prefix="net/mtrop/tame">
			</zipfileset>
		</jar>
	</target>

	<target name="jar.tame.compiler.one.min" depends="jar.tame.compiler.one" description="Jars up the minified set of classes needed to run the compiler in one standalone JAR.">
		<delete file="${jar.dir}/${jar.compiler.one.min.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.compiler.one.min.filename}">
			<manifest>
		    	<attribute name="Main-Class" value="net.mtrop.tame.compiler.TAMECompilerMain"/>
            </manifest>
			<zipfileset refid="fileset.compiler.min" />
		</jar>
	</target>
	
	<target name="jar.tame.console.client.one.min" depends="jar.tame.console.client.one" description="Jars up the minified set of classes needed to run the console client in one standalone JAR.">
		<delete file="${jar.dir}/${jar.console.client.one.min.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.console.client.one.min.filename}">
			<manifest>
		    	<attribute name="Main-Class" value="net.mtrop.tame.console.TAMEConsoleClientMain"/>
            </manifest>
			<zipfileset refid="fileset.client.min" />
		</jar>
	</target>

	<target name="jar" depends="jar.tame, jar.tame.compiler.one, jar.tame.console.client.one" description="Make all JARs.">
	</target>

	<target name="exe.compiler" depends="jar.tame.compiler.one.min, clean.exe, init.exe">
		<delete file="${exe.dir}/${exe.compiler.filename}" />
		<launch4j 
			configFile="./launch4j/TAMECompiler.xml" 
			jar="${jar.dir}/${jar.compiler.one.min.filename}"
			outfile="${exe.dir}/${exe.compiler.filename}"
			fileVersion="${exe.version}" 
			txtFileVersion="${exe.version}" 
			productVersion="${exe.version}" 
			txtProductVersion="${exe.version}"
		/>
	</target>
	
	<target name="exe.console.client" depends="jar.tame.console.client.one.min, clean.exe, init.exe">
		<delete file="${exe.dir}/${exe.console.client.filename}" />
		<launch4j 
			configFile="./launch4j/TAMEConsoleClient.xml" 
			jar="${jar.dir}/${jar.console.client.one.min.filename}"
			outfile="${exe.dir}/${exe.console.client.filename}"
			fileVersion="${exe.version}" 
			txtFileVersion="${exe.version}" 
			productVersion="${exe.version}" 
			txtProductVersion="${exe.version}"
		/>
	</target>
	
	<target name="exe" depends="exe.compiler, exe.console.client" description="Make all EXEs.">
	</target>
	
	<target name="zip.exe" depends="exe">
		<delete file="${zip.dir}/${zip.exe.filename}" />
		<zip basedir="${exe.dir}" destfile="${zip.dir}/${zip.exe.filename}"></zip>
		<zip destfile="${zip.dir}/${zip.exe.filename}" update="true">
			<fileset refid="fileset.documents" />
		</zip>
	</target>
	
	<target name="zip" depends="zip.jar, zip.docs, zip.src, zip.exe" description="Creates all archives.">
	</target>

	<target name="release" depends="zip, exe">
	</target>

</project>