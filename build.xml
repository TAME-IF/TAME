<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2015-2016 Matt Tropiano
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the GNU Lesser Public License v2.1
    which accompanies this distribution, and is available at
    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
   
    Contributors:
        Matt Tropiano - initial API and implementation
 -->
<!DOCTYPE project>
<!-- ====================================================================== 
     Text Adventure Module Engine   
     Matt Tropiano                                                                
     ====================================================================== -->
<project name="build" default="compile">

	<description>TAME</description>

	<property file="build.properties" />
	<property file="versions.properties" />
	
	<!-- Dependencies -->
	<property name="dev.base" value=".." />
	<property name="S" value="${path.separator}" />

	<!-- Project Libs -->
	<property name="common.lib" value="${dev.base}/Common/bin" />
	<property name="common.io.lib" value="${dev.base}/CommonIO/bin" />
	<property name="common.lang.lib" value="${dev.base}/CommonLang/bin" />
	<property name="launch4j.dir" value="${lib.base}/launch4j" />
	<property name="launch4j.lib.jar" value="${launch4j.dir}/launch4j.jar" />
	<property name="launch4j.xstream.lib.jar" value="${launch4j.dir}/lib/xstream.jar" />	
	
	<!-- Project Info -->
	<property name="project.archive" value="tame" />
	<property name="project.javadoc.title" value="TAME" />
	<property name="project.classpath" value="${common.lib}${S}${common.io.lib}${S}${common.lang.lib}" />
	<property name="project.javadoc.packages" value="
		net.mtrop.tame,
		net.mtrop.tame.compiler,
		net.mtrop.tame.console,
		net.mtrop.tame.element,
		net.mtrop.tame.element.context,
		net.mtrop.tame.exception,
		net.mtrop.tame.factory,
		net.mtrop.tame.interrupt,
		net.mtrop.tame.lang
	"/>
	
	<import file="build-import.xml" />

	<!-- Folders and File Names -->
	<property name="src.test.dir" value="testsrc" />
	<property name="package.base.dir" value="net/mtrop/tame" />
	<property name="resource.dir" value="resources" />
	<property name="replace.dir" value="${build.dir}/replace" />
	<property name="zip.exe.filename" value="${project.archive}-exe-${build.version}.zip" />
	<property name="tamedox.dir" value="${build.dir}/tamedox" />

	<!-- Versions -->
	<property name="exe.version" value="0.0.0.0" />
	
	<property name="jar.tame.filename" value="${project.archive}-${build.version}.jar" />
	<property name="jar.compiler.one.filename" value="${project.archive}-compiler-${build.version}.jar" />
	<property name="jar.console.client.one.filename" value="${project.archive}-client-${build.version}.jar" />	
	<property name="jar.compiler.one.min.filename" value="${project.archive}-compiler-${build.version}-min.jar" />
	<property name="jar.console.client.one.min.filename" value="${project.archive}-client-${build.version}-min.jar" />	

	<property name="exe.dir" value="${build.dir}/win32" />
	<property name="exe.compiler.filename" value="tamec.exe" />
	<property name="exe.console.client.filename" value="tame.exe" />
	
	<!-- Filesets -->
	
	<zipfileset 
		id="fileset.compiler.min" 
		src="${jar.dir}/${jar.compiler.one.filename}" 
		includesfile="build-tamec-exe-include.def" 
	/>

	<zipfileset 
		id="fileset.client.min" 
		src="${jar.dir}/${jar.console.client.one.filename}" 
		includesfile="build-tame-exe-include.def" 
	/>
	
	<target name="clean.exe" description="Cleans up the exe builds.">
		<delete dir="${exe.dir}" includeemptydirs="true" casesensitive="false" /> 
	</target>

	<target name="init.exe" depends="clean.exe" description="Initializes the EXE folders.">
		<mkdir dir="${exe.dir}" />
	</target>

	<target name="clean" depends="clean.jar, clean.docs, clean.zip, clean.compile, clean.exe"  description="Cleans up everything.">
	</target>
	
	<target name="compile" depends="init.compile" description="Compiles the project, including test classes.">
		<javac 
			source="1.8"
			srcdir="${src.dir}${S}${src.test.dir}" 
			destdir="${bin.dir}"
            includeAntRuntime="false"
			classpath="${project.classpath}"
			debug="off" 
			/>
		<copy todir="${bin.dir}">
			<fileset dir="${resource.dir}" />
		</copy>
	</target>

	<target name="dependency.common">
		<git-clone repository="https://github.com/BlackRookSoftware/Common" dest="${dependencies.dir}/Common" />
		<delete dir="${dependencies.dir}/Common/.git" includeemptydirs="true" casesensitive="false" /> 
		<ant antfile="${dependencies.dir}/Common/build.xml" useNativeBasedir="true" inheritAll="false" target="compile" />
	</target>

	<target name="dependency.commonio">
		<git-clone repository="https://github.com/BlackRookSoftware/CommonIO" dest="${dependencies.dir}/CommonIO" />
		<delete dir="${dependencies.dir}/CommonIO/.git" includeemptydirs="true" casesensitive="false" /> 
		<ant antfile="${dependencies.dir}/CommonIO/build.xml" useNativeBasedir="true" inheritAll="false" target="compile" />
	</target>

	<target name="dependency.commonlang">
		<git-clone repository="https://github.com/BlackRookSoftware/CommonLang" dest="${dependencies.dir}/CommonLang" />
		<delete dir="${dependencies.dir}/CommonLang/.git" includeemptydirs="true" casesensitive="false" /> 
		<ant antfile="${dependencies.dir}/CommonLang/build.xml" useNativeBasedir="true" inheritAll="false" target="compile" />
	</target>

	<target name="dependency.launch4j.clone">
		<git-clone repository="https://git.code.sf.net/p/launch4j/git" dest="${dependencies.dir}/launch4j" />
		<delete dir="${dependencies.dir}/launch4j/.git" includeemptydirs="true" casesensitive="false" /> 
	</target>
	<target name="dependency.launch4j.getos">
		<condition property="isWindows" value="true" else="false">
			<os family="windows" />
		</condition>
		<condition property="isOSX" value="true" else="false">
			<and>
				<os family="mac" />
				<os family="unix" />
			</and>
		</condition>
		<condition property="isLinux32" value="true" else="false">
			<and>
				<os family="unix" />
				<os arch="x86" />
			</and>
		</condition>
		<condition property="isLinux64" value="true" else="false">
			<and>
				<os family="unix" />
				<os arch="x64" />
			</and>
		</condition>
	</target>
	<target name="dependency.launch4j.win32" if="${isWindows}">
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="binutils-win32" />
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="jar" />
	</target>
	<target name="dependency.launch4j.linux32" if="${isLinux32}">
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="binutils-linux" />
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="jar" />
	</target>
	<target name="dependency.launch4j.linux64" if="${isLinux64}">
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="binutils-linux-x64" />
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="jar" />
	</target>
	<target name="dependency.launch4j.osx32" if="${isOSX}">
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="binutils-macosx-x86" />
		<ant antfile="${dependencies.dir}/launch4j/build-private.xml" useNativeBasedir="true" inheritAll="false" target="jar" />
	</target>
	<target name="dependency.launch4j" depends="dependency.launch4j.clone, dependency.launch4j.getos, dependency.launch4j.win32, dependency.launch4j.linux32, dependency.launch4j.linux64, dependency.launch4j.osx32">
	</target>
	<target name="dependency.properties">
		<echo message="Writing to build.properties...." />
		<echo message="dev.base=${dependencies.dir}&#10;" file="build.properties" append="true" />
		<echo message="libs.base=${dependencies.dir}&#10;" file="build.properties" append="true" />
		<echo message="launch4j.dir=${dependencies.dir}/launch4j&#10;" file="build.properties" append="true" />
	</target>
	
	<target name="dependencies" depends="init.dependencies, dependency.common, dependency.commonio, dependency.commonlang, dependency.launch4j, dependency.properties" description="Downloads and compiles the dependencies.">
	</target>

	<target name="javadoc" depends="init.docs" description="Builds the documentation.">
        <javadoc access="protected" 
        	additionalparam="-J-Xmx512m  " author="true" 
        	classpath="${project.classpath}${path.separator}${bin.dir}" 
        	doctitle="${project.javadoc.title}" 
        	sourcepath="${src.dir}" 
        	packagenames="${project.javadoc.packages}"
        	destdir="${docs.dir}" 
    		source="1.8" 
        	splitindex="true" 
        	use="true" 
        	version="true" 
        	nodeprecated="false" 
        	nodeprecatedlist="false" 
        	noindex="false" 
        	nonavbar="false" 
        	notree="false"
    		>
            <link href="http://blackrooksoftware.com/docs/common/"/>
            <link href="http://blackrooksoftware.com/docs/commonio/"/>
            <link href="http://blackrooksoftware.com/docs/commonlang/"/>
            <link href="http://download.oracle.com/javase/7/docs/api/"/>
        </javadoc>
    </target>	

	<target name="write.version" description="Generates the version resource.">
		<delete file="${bin.dir}/TAMEVersion.txt" />
		<echo message="${build.version}" file="${bin.dir}/${package.base.dir}/TAMEVersion.txt" />
	</target>

	<target name="jar.tame" depends="compile, write.version" description="Jars up TAME classes. Nothing executable.">
		<delete file="${jar.dir}/${jar.tame.filename}" casesensitive="false" /> 
		<jar destfile="${jar.dir}/${jar.tame.filename}">
			<fileset dir="${bin.dir}" >
			    <exclude name="**/console/" />
			    <exclude name="**/compiler/" />
			    <exclude name="**/test/" />
			</fileset>
			<fileset dir="${resource.dir}">
			</fileset>
		</jar>
	</target>
	
	<target name="jar.tame.compiler.one" depends="compile, write.version" description="Jars up all classes needed to run the compiler in one standalone JAR.">
		<delete file="${jar.dir}/${jar.compiler.one.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.compiler.one.filename}">
			<manifest>
		    	<attribute name="Main-Class" value="net.mtrop.tame.compiler.TAMECompilerMain"/>
            </manifest>
			<fileset dir="${bin.dir}" >
			    <exclude name="**/console/" />
			    <exclude name="**/test/" />
			</fileset>
		</jar>
		<jar destfile="${jar.dir}/${jar.compiler.one.filename}" update="true">
			<fileset dir="${common.lib}" >
			</fileset>
			<fileset dir="${common.io.lib}" >
			</fileset>
			<fileset dir="${common.lang.lib}" >
			</fileset>
			<fileset dir="${resource.dir}">
			</fileset>
		</jar>
	</target>

	<target name="jar.tame.console.client.one" depends="compile, write.version" description="Jars up all classes needed to run the console client in one standalone JAR.">
		<delete file="${jar.dir}/${jar.console.client.one.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.console.client.one.filename}">
			<manifest>
		    	<attribute name="Main-Class" value="net.mtrop.tame.console.TAMEConsoleClientMain"/>
            </manifest>
			<fileset dir="${bin.dir}" >
			    <exclude name="**/compiler/" />
			    <exclude name="**/test/" />
			</fileset>
		</jar>
		<jar destfile="${jar.dir}/${jar.console.client.one.filename}" update="true">
			<fileset dir="${common.lib}" >
			</fileset>
			<fileset dir="${common.io.lib}" >
			</fileset>
			<fileset dir="${common.lang.lib}" >
			</fileset>
		</jar>
	</target>

	<target name="jar.tame.compiler.one.min" depends="jar.tame.compiler.one" description="Jars up the minified set of classes needed to run the compiler in one standalone JAR.">
		<delete file="${jar.dir}/${jar.compiler.one.min.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.compiler.one.min.filename}">
			<manifest>
		    	<attribute name="Main-Class" value="net.mtrop.tame.compiler.TAMECompilerMain"/>
            </manifest>
			<zipfileset refid="fileset.compiler.min" />
		</jar>
	</target>
	
	<target name="jar.tame.console.client.one.min" depends="jar.tame.console.client.one" description="Jars up the minified set of classes needed to run the console client in one standalone JAR.">
		<delete file="${jar.dir}/${jar.console.client.one.min.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.console.client.one.min.filename}">
			<manifest>
		    	<attribute name="Main-Class" value="net.mtrop.tame.console.TAMEConsoleClientMain"/>
            </manifest>
			<zipfileset refid="fileset.client.min" />
		</jar>
	</target>

	<target name="jar" depends="init.jar, jar.tame, jar.tame.compiler.one, jar.tame.compiler.one.min, jar.tame.console.client.one, jar.tame.console.client.one.min" description="Make all JARs.">
	</target>

	<target name="exe.taskdef">
		<taskdef 
			name="launch4j"
			classname="net.sf.launch4j.ant.Launch4jTask"
			classpath="${launch4j.lib.jar}${S}${launch4j.xstream.lib.jar}"
		/>
	</target>
	
	<target name="exe.compiler" depends="jar.tame.compiler.one.min, clean.exe, init.exe, exe.taskdef">
		<delete file="${exe.dir}/${exe.compiler.filename}" />
		<launch4j 
			configFile="./launch4j/TAMECompiler.xml" 
			jar="${jar.dir}/${jar.compiler.one.min.filename}"
			outfile="${exe.dir}/${exe.compiler.filename}"
			fileVersion="${exe.version}" 
			txtFileVersion="${exe.version}" 
			productVersion="${exe.version}" 
			txtProductVersion="${exe.version}"
		/>
	</target>
	
	<target name="exe.console.client" depends="jar.tame.console.client.one.min, clean.exe, init.exe, exe.taskdef">
		<delete file="${exe.dir}/${exe.console.client.filename}" />
		<launch4j 
			configFile="./launch4j/TAMEConsoleClient.xml" 
			jar="${jar.dir}/${jar.console.client.one.min.filename}"
			outfile="${exe.dir}/${exe.console.client.filename}"
			fileVersion="${exe.version}" 
			txtFileVersion="${exe.version}" 
			productVersion="${exe.version}" 
			txtProductVersion="${exe.version}"
		/>
	</target>

	<target name="exe" depends="exe.compiler, exe.console.client" description="Make all EXEs.">
		<condition property="exe.deploy.dir.set" else="false">
			<isset property="exe.deploy.dir"/>
		</condition>
	</target>

	<target name="exe.deploy.true" if="${exe.deploy.dir.set}">
		<copy overwrite="true" todir="${exe.deploy.dir}">
			<fileset dir="${exe.dir}"/>
		</copy>
	</target>
	<target name="exe.deploy.false" unless="${exe.deploy.dir.set}">
		<echo message="Skipping deploy: exe.deploy.dir property not set!" />
	</target>

	<target name="exe.deploy" depends="exe, exe.deploy.true, exe.deploy.false" description="Makes and deploys EXEs if output directory specified.">
	</target>
	
	<target name="zip.exe" depends="exe" description="Makes and zips the EXEs.">
		<delete file="${zip.dir}/${zip.exe.filename}" />
		<zip basedir="${exe.dir}" destfile="${zip.dir}/${zip.exe.filename}"></zip>
		<zip destfile="${zip.dir}/${zip.exe.filename}" update="true">
			<fileset refid="fileset.documents" />
		</zip>
	</target>

	<target name="zip.jar" depends="init.zip, jar" description="Makes and zips the JARs.">
		<delete file="${zip.dir}/${zip.filename}" />
		<zip destfile="${zip.dir}/${zip.filename}">
			<fileset dir="${jar.dir}" />
			<fileset refid="fileset.documents" />
		</zip>
	</target>

	<target name="zip" depends="zip.jar, zip.docs, zip.exe" description="Creates all zips.">
	</target>
	
	<target name="release" depends="zip, exe.deploy">
	</target>

</project>