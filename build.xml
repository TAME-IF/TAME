<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<!-- ======================================================================
     Text Adventure Module Engine
     Matt Tropiano
     ====================================================================== -->
<project name="tame" default="compile">

	<description>TAME</description>

	<property file="build.properties" />
	<property file="versions.properties" />

	<!-- Dependencies -->
	<property name="dev.base" value=".." />
	<property name="S" value="${path.separator}" />

	<!-- Project Libs -->
	<property name="common.lib" value="${dev.base}/Common/bin" />
	<property name="common.io.lib" value="${dev.base}/CommonIO/bin" />
	<property name="common.lang.lib" value="${dev.base}/CommonLang/bin" />

	<!-- Project Info -->
	<property name="project.archive" value="tame" />
	<property name="project.java.modules" value="java.base" />
	<property name="project.javadoc.title" value="TAME" />
	<property name="project.classpath" value="${common.lib}${S}${common.io.lib}${S}${common.lang.lib}" />
	<property name="project.javadoc.packages" value="
		com.tameif.tame,
		com.tameif.tame.compiler,
		com.tameif.tame.console,
		com.tameif.tame.element,
		com.tameif.tame.element.context,
		com.tameif.tame.exception,
		com.tameif.tame.factory,
		com.tameif.tame.interrupt,
		com.tameif.tame.lang
	"/>

	<import file="build-import.xml" />
	<import file="build-dependencies.xml" />

	<!-- Folders and File Names -->
	<property name="src.test.dir" value="testsrc" />
	<property name="package.base.dir" value="com/tameif/tame" />
	<property name="resource.dir" value="resources" />
	<property name="replace.dir" value="${build.dir}/replace" />
	<property name="tamedocs.dir" value="${build.dir}/tamedocs" />
	<property name="jre.dir" value="${build.dir}/jre" />
	<property name="jre.scripts.dir" value="${jre.dir}/scripts" />
	<property name="scripts.dir" value="${build.dir}/scripts" />
	<property name="js.dir" value="${build.dir}/js" />

	<property name="zip.js.node.filename" value="${project.archive}-nodejs-${build.version}.zip" />
	<property name="zip.js.browser.filename" value="${project.archive}-browserjs-${build.version}.zip" />
	<property name="zip.jar.filename" value="${project.archive}-jar-${build.version}.zip" />
	<property name="zip.jar.one.filename" value="${project.archive}-standalone-${build.version}.zip" />
	<property name="zip.jre.win32.filename" value="${project.archive}-jre-win32-${build.version}.zip" />
	<property name="zip.jre.win64.filename" value="${project.archive}-jre-win64-${build.version}.zip" />
	<property name="zip.jre.macos.filename" value="${project.archive}-jre-macos-${build.version}.tar.gz" />
	<property name="zip.jre.linux32.filename" value="${project.archive}-jre-linux32-${build.version}.tar.gz" />
	<property name="zip.jre.linux64.filename" value="${project.archive}-jre-linux64-${build.version}.tar.gz" />

	<property name="js.node.filename" value="tame.js" />
	<property name="js.browser.filename" value="tame-${build.version}.js" />

	<property name="jar.tame.filename" value="${project.archive}-${build.version}.jar" />
	<property name="jar.tame.one.filename" value="${project.archive}-standalone-${build.version}.jar" />

	<!-- Filesets -->

	<target name="clean" depends="clean.jar, clean.docs, clean.zip, clean.compile, clean.jre, clean.jar.scripts"  description="Cleans up everything.">
	</target>

	<target name="compile.scripts.windows" if="${os.isWindows}">
		<!-- Windows Commands -->
		<echo message="@java -cp &quot;%~dp0\${project.classpath}${S}${bin.dir}&quot; com.tameif.tame.console.TAMEConsoleShellMain %*&#10;" file="tame.cmd" />
		<echo message="@java -cp &quot;%~dp0\${project.classpath}${S}${bin.dir}&quot; com.tameif.tame.compiler.TAMECompilerMain %*&#10;" file="tamec.cmd" />
	</target>

	<target name="compile.scripts.bash" if="${os.bash}">
		<!-- Bash Shell Commands -->
		<echo message="#!/bin/bash&#10;" file="tame.sh" />
		<echo message="SCRIPTDIR=&quot;$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)&quot;&#10;" file="tame.sh" append="true" />
		<echo message="java -cp &quot;$SCRIPTDIR/${project.classpath}${S}${bin.dir}&quot; com.tameif.tame.console.TAMEConsoleShellMain $@&#10;" file="tame.sh" append="true" />

		<echo message="#!/bin/bash&#10;" file="tamec.sh" />
		<echo message="SCRIPTDIR=&quot;$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)&quot;&#10;" file="tamec.sh" append="true" />
		<echo message="java -cp &quot;$SCRIPTDIR/${project.classpath}${S}${bin.dir}&quot; com.tameif.tame.compiler.TAMECompilerMain $@&#10;" file="tamec.sh" append="true" />

		<!-- Set permissions -->
		<chmod file="tame.sh" perm="ugo+rx"/>
		<chmod file="tamec.sh" perm="ugo+rx"/>
	</target>

	<target name="compile" depends="init.compile, get.os, compile.scripts.windows, compile.scripts.bash" description="Compiles the project, excluding test classes.">
		<javac
			source="1.8"
			target="1.8"
			srcdir="${src.dir}"
			destdir="${bin.dir}"
            includeAntRuntime="false"
			classpath="${project.classpath}"
			debug="off"
		/>
		<copy todir="${bin.dir}">
			<fileset dir="${resource.dir}" />
		</copy>
		<echo message="${build.version.number}" file="${bin.dir}/${package.base.dir}/TAMEVersion.txt" />
	</target>

	<target name="compile.tests.only" description="Compiles test classes.">
		<javac
			source="1.8"
			target="1.8"
			srcdir="${src.test.dir}"
			destdir="${bin.dir}"
            includeAntRuntime="false"
			classpath="${project.classpath}${S}${bin.dir}"
			debug="off"
		/>
	</target>

	<target name="compile.all" depends="compile, compile.tests.only" description="Compiles everything.">
	</target>

	<target name="dependency.common">
		<git-export repository="https://github.com/BlackRookSoftware/Common" dest="${dependencies.dir}/Common" />
		<ant antfile="${dependencies.dir}/Common/build.xml" useNativeBasedir="true" inheritAll="false" target="compile" />
	</target>
	<target name="dependency.commonio">
		<git-export repository="https://github.com/BlackRookSoftware/CommonIO" dest="${dependencies.dir}/CommonIO" />
		<ant antfile="${dependencies.dir}/CommonIO/build.xml" useNativeBasedir="true" inheritAll="false" target="compile" />
	</target>
	<target name="dependency.commonlang">
		<git-export repository="https://github.com/BlackRookSoftware/CommonLang" dest="${dependencies.dir}/CommonLang" />
		<ant antfile="${dependencies.dir}/CommonLang/build.xml" useNativeBasedir="true" inheritAll="false" target="compile" />
	</target>
	<target name="dependency.properties">
		<echo message="Writing to build.properties...." />
		<echo message="dev.base=${dependencies.dir}&#10;" file="build.properties" append="true" />
	</target>

	<target name="dependencies" depends="init.dependencies, dependency.common, dependency.commonio, dependency.commonlang, dependency.properties" description="Downloads and compiles the dependencies.">
	</target>

	<target name="javadoc" depends="init.docs" description="Builds the documentation.">
        <javadoc access="protected"
        	additionalparam="-J-Xmx512m" author="true"
        	classpath="${project.classpath}${path.separator}${bin.dir}"
        	doctitle="${project.javadoc.title}"
        	sourcepath="${src.dir}"
        	packagenames="${project.javadoc.packages}"
        	destdir="${docs.dir}"
    		source="1.8"
        	splitindex="true"
        	use="true"
        	version="true"
        	nodeprecated="false"
        	nodeprecatedlist="false"
        	noindex="false"
        	nonavbar="false"
        	notree="false"
   			>
            <link href="https://blackrooksoftware.com/docs/common/" packagelistloc="element-list"/>
            <link href="https://blackrooksoftware.com/docs/commonio/"/>
            <link href="https://blackrooksoftware.com/docs/commonlang/"/>
            <link href="https://docs.oracle.com/javase/10/docs/api/" packagelistloc="element-list"/>
        </javadoc>
    </target>

	<!-- Generates the version resource. -->
	<target name="jar.tame" depends="compile, init.jar" description="Jars up TAME classes. Nothing executable.">
		<delete file="${jar.dir}/${jar.tame.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.tame.filename}">
			<fileset dir="${bin.dir}" >
			    <exclude name="**/console/" />
			    <exclude name="**/compiler/" />
			    <exclude name="**/test/" />
			</fileset>
		</jar>
	</target>

	<target name="jar.tame.one" depends="compile, init.jar" description="Jars up all classes needed to run the compiler and console in one standalone JAR.">
		<delete file="${jar.dir}/tame-temp-standalone.jar" casesensitive="false" />
		<jar destfile="${jar.dir}/tame-temp-standalone.jar">
			<fileset dir="${bin.dir}" >
			    <exclude name="**/test/" />
			</fileset>
		</jar>
		<jar destfile="${jar.dir}/tame-temp-standalone.jar" update="true">
			<fileset dir="${common.lib}" >
			</fileset>
			<fileset dir="${common.io.lib}" >
			</fileset>
			<fileset dir="${common.lang.lib}" >
			</fileset>
		</jar>
	</target>

	<target name="jar.tame.one.min" depends="jar.tame.one" description="Jars up all classes needed to run the compiler and console in one standalone JAR.">
		<delete file="${jar.dir}/${jar.tame.one.filename}" casesensitive="false" />
		<jar destfile="${jar.dir}/${jar.tame.one.filename}">
			<zipfileset
				src="${jar.dir}/tame-temp-standalone.jar"
				includesfile="build-tame-one-min-include.def"
			/>
		</jar>
	</target>

	<target name="clean.jar.scripts">
		<delete dir="${scripts.dir}" includeemptydirs="true" casesensitive="false" />
	</target>

	<target name="init.jar.scripts" depends="clean.jar.scripts">
		<mkdir dir="${scripts.dir}" />
	</target>

	<target name="jar.scripts.windows">
		<!-- Windows Commands -->
		<echo message="@java -cp &quot;%~dp0\..\jar\${jar.tame.one.filename}&quot; com.tameif.tame.console.TAMEConsoleShellMain %*&#10;" file="${scripts.dir}/tame.cmd" />
		<echo message="@java -cp &quot;%~dp0\..\jar\${jar.tame.one.filename}&quot; com.tameif.tame.compiler.TAMECompilerMain %*&#10;" file="${scripts.dir}/tamec.cmd" />
	</target>

	<target name="jar.scripts.bash">
		<!-- Bash Shell Commands -->
		<echo message="#!/bin/bash&#10;" file="${scripts.dir}/tame" />
		<echo message="SCRIPTDIR=&quot;$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)&quot;&#10;" file="${scripts.dir}/tame" append="true" />
		<echo message="java -cp &quot;$SCRIPTDIR/../jar/${jar.tame.one.filename}&quot; com.tameif.tame.console.TAMEConsoleShellMain $@&#10;" file="${scripts.dir}/tame" append="true" />

		<echo message="#!/bin/bash&#10;" file="${scripts.dir}/tamec" />
		<echo message="SCRIPTDIR=&quot;$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)&quot;&#10;" file="${scripts.dir}/tamec" append="true" />
		<echo message="java -cp &quot;$SCRIPTDIR/../jar/${jar.tame.one.filename}&quot; com.tameif.tame.compiler.TAMECompilerMain $@&#10;" file="${scripts.dir}/tamec" append="true" />
		<!-- Set permissions -->
		<chmod file="${scripts.dir}/tame" perm="ugo+rx"/>
		<chmod file="${scripts.dir}/tamec" perm="ugo+rx"/>
	</target>

	<target name="jar.scripts" depends="init.jar.scripts, jar.scripts.windows, jar.scripts.bash" description="Creates the scripts for running the standalone minified JAR.">
	</target>

	<target name="jar" depends="init.jar, jar.tame, jar.tame.one, jar.tame.one.min" description="Make all JARs.">
	</target>

	<!-- JS Build Targets -->

	<target name="clean.js">
		<delete dir="${js.dir}" includeemptydirs="true" casesensitive="false" />
	</target>

	<target name="init.js" depends="clean.js">
		<mkdir dir="${js.dir}" />
	</target>

	<target name="js.node" depends="init.js, compile">
		<java classname="com.tameif.tame.compiler.TAMECompilerMain" classpath="${project.classpath}${S}${bin.dir}">
			<arg value="--js-engine-node" />
			<arg value="-o" />
			<arg value="${js.dir}/${js.node.filename}" />
		</java>
	</target>

	<target name="js.browser" depends="init.js, compile">
		<java classname="com.tameif.tame.compiler.TAMECompilerMain" classpath="${project.classpath}${S}${bin.dir}">
			<arg value="--js-engine" />
			<arg value="-o" />
			<arg value="${js.dir}/${js.browser.filename}" />
		</java>
	</target>

	<target name="js" depends="js.browser, js.node">
	</target>

	<!-- JRE Embedded Targets -->

	<property name="jlink.options" value="--compress=2" />

	<target name="clean.jre">
		<delete dir="${jre.dir}" includeemptydirs="true" casesensitive="false" />
	</target>

	<target name="init.jre" depends="clean.jre">
		<mkdir dir="${jre.dir}" />
	</target>

	<target name="init.jre.scripts" depends="init.jre">
		<mkdir dir="${jre.scripts.dir}/windows" />
		<mkdir dir="${jre.scripts.dir}/bash" />
	</target>

	<target name="jre.win32" if="${os.isWindows32}" unless="jre.win32.dir">
		<property name="jre.win32.dir" value="${jre.dir}/win32" />
		<exec executable="jlink">
			<arg line="${jlink.options} --add-modules ${project.java.modules} --output &quot;${jre.win32.dir}&quot;" />
		</exec>
	</target>

	<target name="jre.win64" if="${os.isWindows64}" unless="jre.win64.dir">
		<property name="jre.win64.dir" value="${jre.dir}/win64" />
		<exec executable="jlink">
			<arg line="${jlink.options} --add-modules ${project.java.modules} --output &quot;${jre.win64.dir}&quot;" />
		</exec>
	</target>

	<target name="jre.macos" if="${os.isOSX}" unless="jre.macos.dir">
		<property name="jre.macos.dir" value="${jre.dir}/osx" />
		<exec executable="jlink">
			<arg line="${jlink.options} --add-modules ${project.java.modules} --output &quot;${jre.macos.dir}&quot;" />
		</exec>
	</target>

	<target name="jre.linux32" if="${os.isLinux32}" unless="jre.linux32.dir">
		<property name="jre.linux32.dir" value="${jre.dir}/linux32" />
		<exec executable="jlink">
			<arg line="${jlink.options} --add-modules ${project.java.modules} --output &quot;${jre.linux32.dir}&quot;" />
		</exec>
	</target>

	<target name="jre.linux64" if="${os.isLinux64}" unless="jre.linux64.dir">
		<property name="jre.linux64.dir" value="${jre.dir}/linux64" />
		<exec executable="jlink">
			<arg line="${jlink.options} --add-modules ${project.java.modules} --output &quot;${jre.linux64.dir}&quot;" />
		</exec>
	</target>

	<target name="jre.scripts.windows">
		<!-- Windows Commands -->
		<echo message="@&quot;%~dp0\..\jre\bin\java.exe&quot; -cp &quot;%~dp0\..\jar\${jar.tame.one.filename}&quot; com.tameif.tame.console.TAMEConsoleShellMain %*&#10;" file="${jre.scripts.dir}/windows/tame.cmd" />
		<echo message="@&quot;%~dp0\..\jre\bin\java.exe&quot; -cp &quot;%~dp0\..\jar\${jar.tame.one.filename}&quot; com.tameif.tame.compiler.TAMECompilerMain %*&#10;" file="${jre.scripts.dir}/windows/tamec.cmd" />
	</target>

	<target name="jre.scripts.bash">
		<!-- Bash Shell Commands -->
		<echo message="#!/bin/bash&#10;" file="${jre.scripts.dir}/bash/tame" />
		<echo message="SCRIPTDIR=&quot;$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)&quot;&#10;" file="${jre.scripts.dir}/bash/tame" append="true" />
		<echo message="&quot;$SCRIPTDIR/../jre/bin/java&quot; -cp &quot;$SCRIPTDIR/../jar/${jar.tame.one.filename}&quot; com.tameif.tame.console.TAMEConsoleShellMain $@&#10;" file="${jre.scripts.dir}/bash/tame" append="true" />

		<echo message="#!/bin/bash&#10;" file="${jre.scripts.dir}/bash/tamec" />
		<echo message="SCRIPTDIR=&quot;$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)&quot;&#10;" file="${jre.scripts.dir}/bash/tamec" append="true" />
		<echo message="&quot;$SCRIPTDIR/../jre/bin/java&quot; -cp &quot;$SCRIPTDIR/../jar/${jar.tame.one.filename}&quot; com.tameif.tame.compiler.TAMECompilerMain $@&#10;" file="${jre.scripts.dir}/bash/tamec" append="true" />
		<!-- Set permissions -->
		<chmod file="${jre.scripts.dir}/bash/tame" perm="ugo+rx"/>
		<chmod file="${jre.scripts.dir}/bash/tamec" perm="ugo+rx"/>
	</target>

	<target name="jre.scripts" depends="init.jre.scripts, jre.scripts.windows, jre.scripts.bash" description="Creates the scripts for running a minified JRE.">
	</target>

	<target name="jre" depends="get.os, init.jre, jre.win64, jre.win32, jre.macos, jre.linux64, jre.linux32" description="Creates the a minified JRE via JLink (JDK 9+).">
	</target>

	<!-- ==== Zip stuff ==== -->

	<target name="zip.js.node" depends="init.zip, js.node" description="Makes and zips the TAME NodeJS version.">
		<delete file="${zip.dir}/${zip.js.node.filename}" />
		<zip destfile="${zip.dir}/${zip.js.node.filename}" compress="true" level="9">
			<fileset file="${js.dir}/${js.node.filename}" />
			<fileset refid="fileset.documents" />
		</zip>
	</target>

	<target name="zip.js.browser" depends="init.zip, js.browser" description="Makes and zips the TAME browser JS version.">
		<delete file="${zip.dir}/${zip.js.browser.filename}" />
		<zip destfile="${zip.dir}/${zip.js.browser.filename}" compress="true" level="9">
			<fileset file="${js.dir}/${js.browser.filename}" />
			<fileset refid="fileset.documents" />
		</zip>
	</target>

	<target name="zip.jar.tame" depends="init.zip, jar" description="Makes and zips the core TAME JAR.">
		<delete file="${zip.dir}/${zip.jar.filename}" />
		<zip destfile="${zip.dir}/${zip.jar.filename}" compress="true" level="9">
			<zipfileset file="${jar.dir}/${jar.tame.filename}" prefix="jar/" />
			<fileset refid="fileset.documents" />
		</zip>
	</target>

	<target name="zip.jar.tame.one" depends="init.zip, jar, jar.scripts" description="Makes and zips the standalone TAME JAR plus scripts to execute.">
		<delete file="${zip.dir}/${zip.jar.one.filename}" />
		<zip destfile="${zip.dir}/${zip.jar.one.filename}" compress="true" level="9">
			<zipfileset dir="${scripts.dir}" filemode="755" prefix="bin/" />
			<zipfileset file="${jar.dir}/${jar.tame.one.filename}" prefix="jar/" />
			<fileset refid="fileset.documents" />
		</zip>
	</target>

	<target name="zip.jre.win32" if="jre.win32.dir" depends="jre.scripts, jar.tame.one.min">
		<delete file="${zip.dir}/${zip.jre.win32.filename}" />
		<zip destfile="${zip.dir}/${zip.jre.win32.filename}" compress="true" level="9">
			<zipfileset dir="${jre.win32.dir}" prefix="jre/"/>
			<zipfileset dir="${jre.scripts.dir}/windows" prefix="bin/" />
			<zipfileset file="${jar.dir}/${jar.tame.one.filename}" prefix="jar/" />
			<fileset refid="fileset.documents" />
		</zip>
	</target>

	<target name="zip.jre.win64" if="jre.win64.dir" depends="jre.scripts, jar.tame.one.min">
		<delete file="${zip.dir}/${zip.jre.win64.filename}" />
		<zip destfile="${zip.dir}/${zip.jre.win64.filename}" compress="true" level="9">
			<zipfileset dir="${jre.win64.dir}" prefix="jre/"/>
			<zipfileset dir="${jre.scripts.dir}/windows" prefix="bin/" />
			<zipfileset file="${jar.dir}/${jar.tame.one.filename}" prefix="jar/" />
			<fileset refid="fileset.documents" />
		</zip>
	</target>

	<target name="zip.jre.macos" if="jre.macos.dir" depends="jre.scripts, jar.tame.one.min">
		<delete file="${zip.dir}/${zip.jre.macos.filename}" />
		<tar destfile="${zip.dir}/${zip.jre.macos.filename}" compression="gzip">
			<tarfileset dir="${jre.macos.dir}" prefix="jre/" filemode="755">
				<include name="bin/**" />
			</tarfileset>
			<tarfileset dir="${jre.macos.dir}" prefix="jre/">
				<exclude name="bin/**" />
			</tarfileset>
			<tarfileset file="${jar.dir}/${jar.tame.one.filename}" prefix="jar/" />
			<tarfileset dir="${jre.scripts.dir}/bash" filemode="755" prefix="bin/"/>
			<fileset refid="fileset.documents" />
		</tar>
	</target>

	<target name="zip.jre.linux32" if="jre.linux32.dir" depends="jre.scripts, jar.tame.one.min">
		<delete file="${zip.dir}/${zip.jre.linux32.filename}" />
		<tar destfile="${zip.dir}/${zip.jre.linux32.filename}" compression="gzip">
			<tarfileset dir="${jre.linux32.dir}" prefix="jre/" filemode="755">
				<include name="bin/**" />
			</tarfileset>
			<tarfileset dir="${jre.linux32.dir}" prefix="jre/">
				<exclude name="bin/**" />
			</tarfileset>
			<tarfileset dir="${jre.scripts.dir}/bash" filemode="755" prefix="bin/" />
			<tarfileset file="${jar.dir}/${jar.tame.one.filename}" prefix="jar/" />
			<fileset refid="fileset.documents" />
		</tar>
	</target>

	<target name="zip.jre.linux64" if="jre.linux64.dir" depends="jre.scripts, jar.tame.one.min">
		<delete file="${zip.dir}/${zip.jre.linux64.filename}" />
		<tar destfile="${zip.dir}/${zip.jre.linux64.filename}" compression="gzip">
			<tarfileset dir="${jre.linux64.dir}" prefix="jre/" filemode="755">
				<include name="bin/**" />
			</tarfileset>
			<tarfileset dir="${jre.linux64.dir}" prefix="jre/">
				<exclude name="bin/**" />
			</tarfileset>
			<tarfileset dir="${jre.scripts.dir}/bash" filemode="755" prefix="bin/" />
			<tarfileset file="${jar.dir}/${jar.tame.one.filename}" prefix="jar/" />
			<fileset refid="fileset.documents" />
		</tar>
	</target>

	<target name="zip.jre" depends="jre, zip.jre.win32, zip.jre.win64, zip.jre.macos, zip.jre.linux32, zip.jre.linux64">
	</target>

	<target name="zip.js" depends="zip.js.node, zip.js.browser">
	</target>
	
	<target name="zip.src" depends="init.zip" description="Archives the source code.">
		<delete file="${zip.dir}/${zip.sources.filename}" />
		<zip destfile="${zip.dir}/${zip.sources.filename}" compress="true" level="9">
			<zipfileset dir="${src.dir}" prefix="src"/>
			<zipfileset dir="${resource.dir}" prefix="resources"/>
			<fileset refid="fileset.documents" />
			<fileset refid="fileset.buildfiles" />
		</zip>
	</target>

	<target name="release" depends="zip.src, zip.docs, zip.js, zip.jar.tame, zip.jar.tame.one, zip.jre" description="Creates all zips and releases.">
	</target>

</project>
